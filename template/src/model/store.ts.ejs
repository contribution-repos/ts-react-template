import { combineReducers, applyMiddleware, compose, createStore } from 'redux';
<% if(redux && router) { -%>import { connectRouter, routerMiddleware, RouterRootState } from 'connected-react-router';<% } %>
<% if(redux && router) { -%>import { createHashHistory } from 'history';<% } %>
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import thunk from 'redux-thunk';

import appReducer, { IInitialState } from './reducer';

<% if(redux && router) { -%>export const history = createHashHistory();<% } %>

export interface IRootState extends RouterRootState {
  appState: IInitialState;
}

const composeEnhancers = composeWithDevTools({
  // options like actionSanitizer, stateSanitizer
});

function configureStore() {
  const store = createStore(
    combineReducers<IRootState>({
      <% if(redux && router) { -%>router: connectRouter(history),<% } %>
      appState: appReducer,
    }),
    {},
    composeEnhancers(
      applyMiddleware(
        <% if(redux && router) { -%>routerMiddleware(history),<% } %>
        thunk,
        // ... other middlewares ...
      ),
    ),
  );

  return store;
}

export const store = configureStore();
